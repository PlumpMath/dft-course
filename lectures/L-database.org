#+TITLE:     Databases and DFT
#+AUTHOR:    John Kitchin
#+EMAIL:     jkitchin@cmu.edu
#+DATE:      2012-11-28 Wed
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:

* Tools for generating data
  1. emacs + org-mode
  2. python + ase

* Tools for sharing data
  1. hard-drive/common network
  2. gitHUB

     For project 2, we ran about 8900 calculations! The repository is
     just over 50 GB.

* Documenting your work
emacs + org-mode enables you to interleave the narrative description
of your work with the code that sets up, runs the calculations
and which analyzes the results, including making and displaying
the figures.

** Documenting your results

Here is an example of code and some results.
#+BEGIN_SRC python :results output :exports both
from ase import Atoms, Atom
from jasp import *
import numpy as np
np.set_printoptions(precision=3, suppress=True)

co = Atoms([Atom('C',[0,   0, 0]),
            Atom('O',[1.2, 0, 0])],
            cell=(6., 6., 6.))

with jasp('simple-co', #output dir
          xc='PBE',  # the exchange-correlation functional
          nbands=6,  # number of bands
          encut=350, # planewave cutoff
          ismear=1,  # Methfessel-Paxton smearing
          sigma=0.01,# very small smearing factor for a molecule
          atoms=co) as calc:
    print 'energy = {0} eV'.format(co.get_potential_energy())
    print co.get_forces()
#+END_SRC

#+RESULTS:
: energy = -14.687906 eV
: [[ 5.095  0.     0.   ]
:  [-5.095  0.     0.   ]]

Note that this contains all the information you need to reproduce the calculation. This level of detail is rarely seen in publications! In mod:jasp we provide several ways to represent the calculation results.

*** Representing the result in nicely printed format
There is a utility called =jaspsum= which "summarizes" a jasp calculation by printing a reasonably formatted output summary. Here is an example:

#+BEGIN_SRC python :results output
from jasp import *
with jasp('simple-co') as calc:
    print calc
#+END_SRC

#+RESULTS:
#+begin_example
: -----------------------------
  VASP calculation from /home/jkitchin/dft-course/lectures/simple-co
  converged: True
  Energy = -14.687906 eV

  Unit cell vectors (angstroms)
        x       y     z      length
  a0 [ 6.000  0.000  0.000] 6.000
  a1 [ 0.000  6.000  0.000] 6.000
  a2 [ 0.000  0.000  6.000] 6.000
  a,b,c,alpha,beta,gamma (deg): 6.000 6.000 6.000 90.0 90.0 90.0
  Unit cell volume = 216.000 Ang^3
  Stress (GPa):xx,   yy,    zz,    yz,    xz,    xy
            -66.528 -17.624 -17.624  0.000  0.000  0.000
 Atom#  sym       position [x,y,z]         tag  rmsForce constraints
   0    C   [0.000      0.000      0.000]   0   5.10      T T T
   1    O   [1.200      0.000      0.000]   0   5.10      T T T
--------------------------------------------------

INCAR Parameters:
-----------------
        nbands: 6
        ismear: 1
         encut: 350.0
         sigma: 0.01
        magmom: None
          prec: Normal
          kpts: [1, 1, 1]
    reciprocal: False
            xc: PBE
           txt: -
         gamma: False

Pseudopotentials used:
----------------------
C: potpaw_PBE/C/POTCAR (git-hash: 2272d6745da89a3d872983542cef1d18750fc952)
O: potpaw_PBE/O/POTCAR (git-hash: 9a0489b46120b0cad515d935f44b5fbe3a3b1dfa)
#+end_example

This summary actually contains more information than the script that ran the calculation because it lists the pseudopotentials that were used, and some of the default values that were not specified before. One disadvantage of that output is that it is not readily machine readable. You have to parse it.

*** Representing the results as python code
#+BEGIN_SRC python :results output
from jasp import *
with jasp('simple-co') as calc:
    print calc.python
#+END_SRC

#+RESULTS:
#+begin_example
from numpy import array
from ase import Atom, Atoms
from jasp import *

atoms = Atoms([Atom('C',[0.0, 0.0, 0.0]),
               Atom('O',[1.2, 0.0, 0.0])],
               cell = [[6.0, 0.0, 0.0],
                       [0.0, 6.0, 0.0],
                       [0.0, 0.0, 6.0]])

with jasp('simple-co',
          nbands = 6,
          ismear = 1,
          encut = 350.0,
          sigma = 0.01,
          prec = 'Normal',
          kpts = [1, 1, 1],
          reciprocal = False,
          xc = 'PBE',
          txt = '-',
          gamma = False,
          atoms=atoms) as calc:
    # your code here

#+end_example

*** Representing the results as json
#+BEGIN_SRC python :results output
from jasp import *
with jasp('simple-co') as calc:
    print calc.json
#+END_SRC

#+RESULTS:
: {"INCAR": {"ldau": null, "eint": null, "lclimb": null, "iband": null, "timestep": null, "nomega": null, "ldau_luj": null, "fnmin": null, "ispin": null, "lcorr": null, "iopt": null, "ichain": null, "ismear": 1, "lscalapack": null, "emin": null, "lwave": null, "maxmove": null, "ngxf": null, "ebreak": null, "lplane": null, "npar": null, "istart": null, "nkred": null, "ialgo": null, "ngz": null, "system": null, "prec": "Normal", "luse_vdw": null, "icharg": null, "sdalpha": null, "nfree": null, "spring": null, "lorbit": null, "zab_vdw": null, "ngy": null, "kspacing": null, "pomass": null, "magmom": null, "lpard": null, "sdr": null, "ropt": null, "aldac": null, "nelm": null, "lsepb": null, "nkredx": null, "nkredy": null, "nkredz": null, "lelf": null, "stol": null, "lvdw": null, "ldauu": null, "zval": null, "nsim": null, "ngyf": null, "deper": null, "lscalu": null, "lglobal": null, "ldipol": null, "precfock": null, "symprec": null, "lvhar": null, "falphadec": null, "weimin": null, "ftimedec": null, "ldneb": null, "maxmix": null, "vdwgr": null, "nwrite": null, "lmaxmix": null, "param2": null, "param1": null, "lbfgsmem": null, "nomegar": null, "smass": null, "laechg": null, "efield": null, "potim": null, "idipol": null, "lhfcalc": null, "lasph": null, "emax": null, "isym": null, "ldauprint": null, "ferdo": null, "encut": 350.0, "lcharg": null, "nbands": 6, "ngzf": null, "images": null, "ediff": null, "enaug": null, "rwigs": null, "dipol": null, "nelect": null, "bmix": null, "fdstep": null, "invcurve": null, "isif": null, "ddr": null, "hfscreen": null, "ftimeinc": null, "lthomas": null, "teend": null, "addgrid": null, "ltangentold": null, "voskown": null, "ediffg": null, "jacobian": null, "vdwrn": null, "nsw": null, "iniwav": null, "algo": null, "nelmdl": null, "amix_mag": null, "aexx": null, "ldaul": null, "lnebcell": null, "encutfock": null, "aggac": null, "ftimemax": null, "ldiag": null, "snl": null, "ldauj": null, "drotmax": null, "nbmod": null, "lasync": null, "nblk": null, "gga": null, "kpuse": null, "ferwe": null, "tebeg": null, "bmix_mag": null, "aggax": null, "iwavpr": null, "encutgw": null, "amin": null, "nupdown": null, "kgamma": null, "loptics": null, "falpha": null, "dfnmax": null, "lvtot": null, "llineopt": null, "ldautype": null, "ngx": null, "dfnmin": null, "ibrion": null, "amix": null, "time": null, "nelmin": null, "lepsilon": null, "lsepk": null, "sigma": 0.01}, "input": {"kpts": [1, 1, 1], "kpts_nintersections": null, "reciprocal": false, "setups": null, "xc": "PBE", "txt": "-", "gamma": false}, "atoms": {"cell": [[6.0, 0.0, 0.0], [0.0, 6.0, 0.0], [0.0, 0.0, 6.0]], "symbols": ["C", "O"], "tags": [0, 0], "pbc": [true, true, true], "positions": [[0.0, 0.0, 0.0], [1.2000000000000166, 0.0, 0.0]]}}

*** Reprenting the results as xml
#+BEGIN_SRC python :results output
from jasp import *
with jasp('simple-co') as calc:
    print calc.xml
#+END_SRC

#+RESULTS:
#+begin_example
<?xml version="1.0" encoding="utf-8"?>
<pyxs:obj xmlns:pyxs="http://projects.coder.cl/pyxser/model/" version="1.0" type="vasp" module="jasp.serialize" objid="id52737680">
  <pyxs:col type="dict" name="d">
    <pyxs:col type="dict" name="INCAR">
      <pyxs:prop type="int" name="ismear">1</pyxs:prop>
      <pyxs:prop type="str" name="prec">Normal</pyxs:prop>
      <pyxs:prop type="float" name="encut">350.0</pyxs:prop>
      <pyxs:prop type="int" name="nbands">6</pyxs:prop>
      <pyxs:prop type="float" name="sigma">0.01</pyxs:prop>
    </pyxs:col>
    <pyxs:col type="dict" name="input">
      <pyxs:col type="list" name="kpts">
        <pyxs:prop type="int" name="kpts">1</pyxs:prop>
        <pyxs:prop type="int" name="kpts">1</pyxs:prop>
        <pyxs:prop type="int" name="kpts">1</pyxs:prop>
      </pyxs:col>
      <pyxs:prop type="bool" name="reciprocal">False</pyxs:prop>
      <pyxs:prop type="str" name="xc">PBE</pyxs:prop>
      <pyxs:prop type="str" name="txt">-</pyxs:prop>
      <pyxs:prop type="bool" name="gamma">False</pyxs:prop>
    </pyxs:col>
    <pyxs:col type="dict" name="atoms">
      <pyxs:col type="list" name="cell">
        <pyxs:col type="list" name="cell">
          <pyxs:prop type="float" name="cell">6.0</pyxs:prop>
          <pyxs:prop type="float" name="cell">0.0</pyxs:prop>
          <pyxs:prop type="float" name="cell">0.0</pyxs:prop>
        </pyxs:col>
        <pyxs:col type="list" name="cell">
          <pyxs:prop type="float" name="cell">0.0</pyxs:prop>
          <pyxs:prop type="float" name="cell">6.0</pyxs:prop>
          <pyxs:prop type="float" name="cell">0.0</pyxs:prop>
        </pyxs:col>
        <pyxs:col type="list" name="cell">
          <pyxs:prop type="float" name="cell">0.0</pyxs:prop>
          <pyxs:prop type="float" name="cell">0.0</pyxs:prop>
          <pyxs:prop type="float" name="cell">6.0</pyxs:prop>
        </pyxs:col>
      </pyxs:col>
      <pyxs:col type="list" name="symbols">
        <pyxs:prop type="str" name="symbols">C</pyxs:prop>
        <pyxs:prop type="str" name="symbols">O</pyxs:prop>
      </pyxs:col>
      <pyxs:col type="list" name="tags">
        <pyxs:prop type="int" name="tags">0</pyxs:prop>
        <pyxs:prop type="int" name="tags">0</pyxs:prop>
      </pyxs:col>
      <pyxs:col type="list" name="pbc">
        <pyxs:prop type="bool" name="pbc">True</pyxs:prop>
        <pyxs:prop type="bool" name="pbc">True</pyxs:prop>
        <pyxs:prop type="bool" name="pbc">True</pyxs:prop>
      </pyxs:col>
      <pyxs:col type="list" name="positions">
        <pyxs:col type="list" name="positions">
          <pyxs:prop type="float" name="positions">0.0</pyxs:prop>
          <pyxs:prop type="float" name="positions">0.0</pyxs:prop>
          <pyxs:prop type="float" name="positions">0.0</pyxs:prop>
        </pyxs:col>
        <pyxs:col type="list" name="positions">
          <pyxs:prop type="float" name="positions">1.2</pyxs:prop>
          <pyxs:prop type="float" name="positions">0.0</pyxs:prop>
          <pyxs:prop type="float" name="positions">0.0</pyxs:prop>
        </pyxs:col>
      </pyxs:col>
    </pyxs:col>
  </pyxs:col>
</pyxs:obj>

#+end_example

That looks intimidating, but it is not for you to read, but a machine, for example a function in mod:ase.io.

* Databases
The previous examples solve one problem: how to represent a result in a way that a computer can read them. To do that, we need a structured data format like json, xml or python. This capability forms the foundation for collecting large datasets for a common purpose.

A new problem now arises, and that is one of searching. We saw this problem already in project 2 in trying to extract pieces of the table containing all the results. This problem is best solved by a database.

(progn
(setq sqlite3-bin "C:\\Windows\\System32\\")
(setenv "PATH" sqlite3-bin)
(setq exec-path '(sqlite3-bin))
(setq org-babel-sqlite3-command "sqlite3"))

#+BEGIN_SRC sqlite :db cdf-3.sqlite
.mode tabs
select * from sqlite_master;
.tables
#+END_SRC





#+BEGIN_SRC sqlite :db cdf-3.sqlite :results table
SELECT * from elements;
#+END_SRC

#+RESULTS:
|   1 |   0 | X  |              |      0.0 |  0.2 |
|   2 |   1 | H  | Hydrogen     |  1.00794 | 0.32 |
|   3 |   2 | He | Helium       |   4.0026 | 0.93 |
|   4 |   3 | Li | Lithium      |    6.941 | 1.23 |
|   5 |   4 | Be | Beryllium    |  9.01218 |  0.9 |
|   6 |   5 | B  | Boron        |   10.811 | 0.82 |
|   7 |   6 | C  | Carbon       |   12.011 | 0.77 |
|   8 |   7 | N  | Nitrogen     |  14.0067 | 0.75 |
|   9 |   8 | O  | Oxygen       |  15.9994 | 0.73 |
|  10 |   9 | F  | Fluorine     |  18.9984 | 0.72 |
|  11 |  10 | Ne | Neon         |  20.1797 | 0.71 |
|  12 |  11 | Na | Sodium       | 22.98977 | 1.54 |
|  13 |  12 | Mg | Magnesium    |   24.305 | 1.36 |
|  14 |  13 | Al | Aluminium    | 26.98154 | 1.18 |
|  15 |  14 | Si | Silicon      |  28.0855 | 1.11 |
|  16 |  15 | P  | Phosphorus   | 30.97376 | 1.06 |
|  17 |  16 | S  | Sulfur       |   32.066 | 1.02 |
|  18 |  17 | Cl | Chlorine     |  35.4527 | 0.99 |
|  19 |  18 | Ar | Argon        |   39.948 | 0.98 |
|  20 |  19 | K  | Potassium    |  39.0983 | 2.03 |
|  21 |  20 | Ca | Calcium      |   40.078 | 1.74 |
|  22 |  21 | Sc | Scandium     |  44.9559 | 1.44 |
|  23 |  22 | Ti | Titanium     |    47.88 | 1.32 |
|  24 |  23 | V  | Vanadium     |  50.9415 | 1.22 |
|  25 |  24 | Cr | Chromium     |   51.996 | 1.18 |
|  26 |  25 | Mn | Manganese    |   54.938 | 1.17 |
|  27 |  26 | Fe | Iron         |   55.847 | 1.17 |
|  28 |  27 | Co | Cobalt       |  58.9332 | 1.16 |
|  29 |  28 | Ni | Nickel       |  58.6934 | 1.15 |
|  30 |  29 | Cu | Copper       |   63.546 | 1.17 |
|  31 |  30 | Zn | Zinc         |    65.39 | 1.25 |
|  32 |  31 | Ga | Gallium      |   69.723 | 1.26 |
|  33 |  32 | Ge | Germanium    |    72.61 | 1.22 |
|  34 |  33 | As | Arsenic      |  74.9216 |  1.2 |
|  35 |  34 | Se | Selenium     |    78.96 | 1.16 |
|  36 |  35 | Br | Bromine      |   79.904 | 1.14 |
|  37 |  36 | Kr | Krypton      |     83.8 | 1.89 |
|  38 |  37 | Rb | Rubidium     |  85.4678 | 2.16 |
|  39 |  38 | Sr | Strontium    |    87.62 | 1.91 |
|  40 |  39 | Y  | Yttrium      |  88.9059 | 1.62 |
|  41 |  40 | Zr | Zirconium    |   91.224 | 1.45 |
|  42 |  41 | Nb | Niobium      |  92.9064 | 1.34 |
|  43 |  42 | Mo | Molybdenum   |    95.94 |  1.3 |
|  44 |  43 | Tc | Technetium   |          | 1.27 |
|  45 |  44 | Ru | Ruthenium    |   101.07 | 1.25 |
|  46 |  45 | Rh | Rhodium      | 102.9055 | 1.25 |
|  47 |  46 | Pd | Palladium    |   106.42 | 1.28 |
|  48 |  47 | Ag | Silver       |  107.868 | 1.34 |
|  49 |  48 | Cd | Cadmium      |   112.41 | 1.41 |
|  50 |  49 | In | Indium       |   114.82 | 1.44 |
|  51 |  50 | Sn | Tin          |   118.71 | 1.41 |
|  52 |  51 | Sb | Antimony     |  121.757 |  1.4 |
|  53 |  52 | Te | Tellurium    |    127.6 | 1.36 |
|  54 |  53 | I  | Iodine       | 126.9045 | 1.33 |
|  55 |  54 | Xe | Xenon        |   131.29 | 1.31 |
|  56 |  55 | Cs | Caesium      | 132.9054 | 2.35 |
|  57 |  56 | Ba | Barium       |   137.33 | 1.98 |
|  58 |  57 | La | Lanthanum    | 138.9055 | 1.25 |
|  59 |  58 | Ce | Cerium       |   140.12 | 1.65 |
|  60 |  59 | Pr | Praseodymium | 140.9077 | 1.65 |
|  61 |  60 | Nd | Neodymium    |   144.24 | 1.64 |
|  62 |  61 | Pm | Promethium   |          | 1.63 |
|  63 |  62 | Sm | Samarium     |   150.36 | 1.62 |
|  64 |  63 | Eu | Europium     |  151.965 | 1.85 |
|  65 |  64 | Gd | Gadolinium   |   157.25 | 1.61 |
|  66 |  65 | Tb | Terbium      | 158.9253 | 1.59 |
|  67 |  66 | Dy | Dysprosium   |    162.5 | 1.59 |
|  68 |  67 | Ho | Holmium      | 164.9303 | 1.58 |
|  69 |  68 | Er | Erbium       |   167.26 | 1.57 |
|  70 |  69 | Tm | Thulium      | 168.9342 | 1.56 |
|  71 |  70 | Yb | Ytterbium    |   173.04 |  1.7 |
|  72 |  71 | Lu | Lutetium     |  174.967 | 1.56 |
|  73 |  72 | Hf | Hafnium      |   178.49 | 1.44 |
|  74 |  73 | Ta | Tantalum     | 180.9479 | 1.34 |
|  75 |  74 | W  | Tungsten     |   183.85 |  1.3 |
|  76 |  75 | Re | Rhenium      |  186.207 | 1.28 |
|  77 |  76 | Os | Osmium       |    190.2 | 1.26 |
|  78 |  77 | Ir | Iridium      |   192.22 | 1.27 |
|  79 |  78 | Pt | Platinum     |   195.08 |  1.3 |
|  80 |  79 | Au | Gold         | 196.9665 | 1.34 |
|  81 |  80 | Hg | Mercury      |   200.59 | 1.49 |
|  82 |  81 | Tl | Thallium     |  204.383 | 1.48 |
|  83 |  82 | Pb | Lead         |    207.2 | 1.47 |
|  84 |  83 | Bi | Bismuth      | 208.9804 | 1.46 |
|  85 |  84 | Po | Polonium     |          | 1.53 |
|  86 |  85 | At | Astatine     |          | 1.47 |
|  87 |  86 | Rn | Radon        |          |  0.2 |
|  88 |  87 | Fr | Francium     |          |  0.2 |
|  89 |  88 | Ra | Radium       | 226.0254 |  0.2 |
|  90 |  89 | Ac | Actinium     |          |  0.2 |
|  91 |  90 | Th | Thorium      | 232.0381 | 1.65 |
|  92 |  91 | Pa | Protactinium | 231.0359 |  0.2 |
|  93 |  92 | U  | Uranium      |  238.029 | 1.42 |
|  94 |  93 | Np | Neptunium    | 237.0482 |  0.2 |
|  95 |  94 | Pu | Plutonium    |          |  0.2 |
|  96 |  95 | Am | Americium    |          |  0.2 |
|  97 |  96 | Cm | Curium       |          |  0.2 |
|  98 |  97 | Bk | Berkelium    |          |  0.2 |
|  99 |  98 | Cf | Californium  |          |  0.2 |
| 100 |  99 | Es | Einsteinium  |          |  0.2 |
| 101 | 100 | Fm | Fermium      |          |  0.2 |
| 102 | 101 | Md | Mendelevium  |          |  0.2 |
| 103 | 102 | No | Nobelium     |          |  0.2 |
| 104 | 103 | Lw | Lawrencium   |          |  0.2 |
