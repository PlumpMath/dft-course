#+TITLE:     hwk3.org Due 10/12/2012
#+AUTHOR:    John Kitchin
#+EMAIL:     jkitchin@HOME-OFFICE
#+DATE:      2012-09-22 Sat
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:

* Reaction energy of CO oxidation
** Compute the reaction energy for CO + 1/2 O_{2} \rightarrow CO_{2}
# <<rxn energy>>
Use a cutoff energy of 250 eV. The molecules should all be relaxed to their lowest energy geometry (perform a geometry optimization). Demonstrate that all the forces on the molecule are less than 0.05 eV/\AA.

#+BEGIN_SRC python :results output
from jasp import *
from ase.data.molecules import molecule

atoms = molecule('CO')
atoms.set_cell((6,6,6), scale_atoms=False)
atoms.center()

with jasp('hwk3/co-250',
          xc='PBE',
          encut=250,
          ibrion=2, nsw=20, ediffg=-0.05,
          atoms=atoms) as calc:
    try:
        co = atoms.get_potential_energy()
    except (VaspSubmitted, VaspQueued):
        co = None

atoms = molecule('CO2')
atoms.set_cell((6,6,6), scale_atoms=False)
atoms.center()

with jasp('hwk3/co2-250',
          xc='PBE',
          encut=250,
          ibrion=2, nsw=20,
          atoms=atoms) as calc:
    try:
        co2 = atoms.get_potential_energy()
    except (VaspSubmitted, VaspQueued):
        co2 = None

atoms = molecule('O2')
atoms.set_cell((6,6,6), scale_atoms=False)
atoms.center()

# the O2 molecule should be spin-polarized
atoms.set_initial_magnetic_moments([1,1])

with jasp('hwk3/o2-250',
          xc='PBE',
          encut=250,
          ispin=2, # spin-polarized
          ibrion=2, nsw=20,
          atoms=atoms) as calc:
    try:
        o2 = atoms.get_potential_energy()
    except (VaspSubmitted, VaspQueued):
        o2 = None

print co, o2, co2

if None not in (co, o2, co2):
    Erxn = co2 - co - 0.5*o2
    print 'The reaction energy is {0:1.3f} eV'.format(Erxn)
#+END_SRC

#+RESULTS:
: -15.152911 -9.890697 -23.312681
: The reaction energy is -3.214 eV

#+BEGIN_SRC python :results output
from jasp import *
with jasp('hwk3/o2-250') as calc:
    atoms = calc.get_atoms()
    print 'O2'
    print atoms.get_forces()

with jasp('hwk3/co2-250') as calc:
    atoms = calc.get_atoms()
    print 'CO2'
    print atoms.get_forces()


with jasp('hwk3/co-250') as calc:
    atoms = calc.get_atoms()
    print 'CO'
    print atoms.get_forces()
#+END_SRC

#+RESULTS:
#+begin_example
hwk3/o2-250
O2
[[ 0.     0.     0.091]
 [ 0.     0.    -0.091]]
hwk3/co2-250
CO2
[[ 0.     0.     0.   ]
 [ 0.     0.     0.005]
 [ 0.     0.    -0.005]]
hwk3/co-250
CO
[[ 0.     0.    -0.008]
 [ 0.     0.     0.008]]
#+end_example

#+begin_note
Note that VASP converged the CO calculation with a residual force of 0.44 eV/ang until I specified via incar:EDIFFG to make the force less than 0.05 eV/ang. This is because the change in total energy between two steps was less than the incar:EDIFFG default setting which defaults to 1 meV. Lesson: you must specify the criteria you want converged! In this case, that means set EDIFFG=-0.05. The negative sign means it is a force criteria, not an energy criteria.
#+end_note

** Convergence test
Repeat the previous problem at 350, 450, and 500 eV. Reoptimize the geometry at each ENCUT value. Compare (in a graph) the convergence of the total energy of each species with the convergence of the reaction energy. Which converges faster?

#+BEGIN_SRC python :results output
from jasp import *
from ase.data.molecules import molecule

for encut in [350, 450, 500]:
    atoms = molecule('CO')
    atoms.set_cell((6,6,6), scale_atoms=False)
    atoms.center()

    with jasp('hwk3/co-{0}'.format(encut),
              xc='PBE',
              encut=encut,
              ibrion=2, nsw=20,
              atoms=atoms) as calc:
        try:
            co = atoms.get_potential_energy()
        except (VaspSubmitted, VaspQueued):
            co = None

    atoms = molecule('CO2')
    atoms.set_cell((6,6,6), scale_atoms=False)
    atoms.center()

    with jasp('hwk3/co2-{0}'.format(encut),
              xc='PBE',
              encut=encut,
              ibrion=2, nsw=20,
              atoms=atoms) as calc:
        try:
            co2 = atoms.get_potential_energy()
        except (VaspSubmitted, VaspQueued):
            co2 = None

    atoms = molecule('O2')
    atoms.set_cell((6,6,6), scale_atoms=False)
    atoms.center()
    atoms.set_initial_magnetic_moments([1,1])

    with jasp('hwk3/o2-{0}'.format(encut),
              xc='PBE',
              encut=encut,
              ispin=2,
              ibrion=2, nsw=20,
              atoms=atoms) as calc:
        try:
            o2 = atoms.get_potential_energy()
        except (VaspSubmitted, VaspQueued):
            o2 = None

    if None not in (co, o2, co2):
        Erxn = co2 - co - 0.5*o2

        print 'At {1} eV the reaction energy is {0:1.3f} eV'.format(Erxn, encut)
#+END_SRC

#+RESULTS:
: At 350 eV the reaction energy is -3.146 eV
: At 450 eV the reaction energy is -3.112 eV
: At 500 eV the reaction energy is -3.107 eV

#+BEGIN_SRC python
from jasp import *
import numpy as np
import matplotlib.pyplot as plt

encuts = [250, 350, 450, 500]

co, co2, o2 = [], [], []

for encut in encuts:
    with jasp('hwk3/co-{0}'.format(encut)) as calc:
        atoms = calc.get_atoms()
        co.append(atoms.get_potential_energy())

    with jasp('hwk3/co2-{0}'.format(encut)) as calc:
        atoms = calc.get_atoms()
        co2.append(atoms.get_potential_energy())

    with jasp('hwk3/o2-{0}'.format(encut)) as calc:
        atoms = calc.get_atoms()
        o2.append(atoms.get_potential_energy())

co = np.array(co)
co2 = np.array(co2)
o2 = np.array(o2)

plt.plot(encuts, co - co[-1])
plt.plot(encuts, co2 - co2[-1])
plt.plot(encuts, o2 - o2[-1])
plt.xlabel('ENCUT (eV)')
plt.ylabel('$\Delta E$ (eV)')
plt.legend(['CO', 'CO2', 'O2'], loc='best')
plt.savefig('hwk3/molecular-convergence.png')

plt.figure()
hrxn = co2 - co - 0.5*o2
plt.plot(encuts, hrxn - hrxn[-1])
plt.xlabel('ENCUT (eV)')
plt.ylabel('$H_{rxn}$ (eV)')
plt.savefig('hwk3/rxn-encut-convergence.png')

plt.show()
#+END_SRC

#+RESULTS:
: None

#+caption: Convergence with ENCUT of molecules. The difference is with respect to the molecule energy at 250 eV.
[[./hwk3/molecular-convergence.png]]



#+caption: Convergence of the CO oxidation reaction.
[[./hwk3/rxn-encut-convergence.png]]

It is probably safe to say that the reaction energy is within 0.02 eV of 3.11 eV. The energy has clearly not completely converged, even at 500 eV. Note the reaction energy change due to convergence is much smaller than the changes in the CO and CO2 molecular energies.

* Zero-point energy corrections
** Compute vibrational modes for CO, CO_{2} and O_{2}
Compute the vibrational modes of each molecule in the CO oxidation reaction. Do this at 350 eV cutoff energy only. Prepare a table of the vibrational modes for molecule.
*** O2
#+BEGIN_SRC python :results output org
from jasp import *

with jasp('hwk3/o2-350') as calc:
    calc.clone('hwk3/o2-350-vib')
    atoms = calc.get_atoms()

with jasp('hwk3/o2-350-vib',
          ibrion=5, nfree=2, nsw=1,
          atoms=atoms) as calc:
    try:
        calc.calculate()
        energies, modes = calc.get_vibrational_modes()
        print '#+caption: O2 vibrational energies'
        print '| mode | energy (eV) |'
        print '|-'
        for i, energy in enumerate(energies):
            print '| {0} | {1} |'.format(i, energy)
    except (VaspSubmitted, VaspQueued):
        pass
#+END_SRC

#+RESULTS:
#+BEGIN_ORG
#+caption: O2 vibrational energies
| mode |      energy (eV) |
|------+------------------|
|    0 |      0.190341039 |
|    1 |      0.007915061 |
|    2 |      0.007672162 |
|    3 |            3e-09 |
|    4 |   (4.887e-06+0j) |
|    5 | (0.000240634+0j) |
#+END_ORG

*** CO2
#+BEGIN_SRC python :results output org
from jasp import *

with jasp('hwk3/co2-350') as calc:
    calc.clone('hwk3/co2-350-vib')
    atoms = calc.get_atoms()

with jasp('hwk3/co2-350-vib',
          ibrion=5, nfree=2, nsw=1,
          atoms=atoms) as calc:
    try:
        calc.calculate()
        energies, modes = calc.get_vibrational_modes()
        print '#+caption: CO2 vibrational energies'
        print '| mode | energy (eV) |'
        print '|-'
        for i, energy in enumerate(energies):
            print '| {0} | {1} |'.format(i, energy)
    except (VaspSubmitted, VaspQueued):
        pass
#+END_SRC

#+RESULTS:
#+BEGIN_ORG
#+caption: CO2 vibrational energies
| mode | energy (eV)      |
|------+------------------|
|    0 | 0.292382847      |
|    1 | 0.163776677      |
|    2 | 0.079327866      |
|    3 | 0.079309389      |
|    4 | (2.1235e-05+0j)  |
|    5 | (5.3063e-05+0j)  |
|    6 | (0.000106744+0j) |
|    7 | (0.010275108+0j) |
|    8 | (0.010672672+0j) |
#+END_ORG

*** CO
#+BEGIN_SRC python :results output org
from jasp import *
with jasp('hwk3/co-350') as calc:
    calc.clone('hwk3/co-350-vib')
    atoms = calc.get_atoms()

with jasp('hwk3/co-350-vib',
          ibrion=5, nfree=2, nsw=1,
          atoms=atoms) as calc:
    try:
        calc.calculate()
        energies, modes = calc.get_vibrational_modes()
        print '#+caption: CO vibrational energies'
        print '| mode | energy (eV) |'
        print '|-'
        for i, energy in enumerate(energies):
            print '| {0} | {1} |'.format(i, energy)
    except (VaspSubmitted, VaspQueued):
        pass
#+END_SRC

#+RESULTS:
#+BEGIN_ORG
#+caption: CO vibrational energies
| mode | energy (eV)     |
|------+-----------------|
|    0 | 0.261051271     |
|    1 | 0.010030828     |
|    2 | 0.009791632     |
|    3 | (2.793e-06+0j)  |
|    4 | (1.1455e-05+0j) |
|    5 | (0.00015078+0j) |
#+END_ORG

** Compute the CO oxidation reaction energy with zero-point energy corrections.
Compare the reaction energy with and without the zero-point energy correction.


We compute zero point energy as the sum of 0.5*h*nu_i

#+BEGIN_SRC python :results output
from jasp import *
import numpy as np
c = 3e10 # speed of light cm/s
h = 4.135667516e-15 # eV/s

with jasp('hwk3/o2-350-vib') as calc:
    freq = calc.get_vibrational_frequencies()

    o2_ZPE = 0.0
    for f in freq:
        if not isinstance(f,float):
            continue #skip complex numbers
        nu = f*c # convert to frequency
        o2_ZPE += 0.5*h*nu
    print o2_ZPE


with jasp('hwk3/co-350-vib') as calc:
    freq = calc.get_vibrational_frequencies()

    co_ZPE = 0.0
    for f in freq:
        if not isinstance(f,float):
            continue #skip complex numbers
        nu = f*c # convert to frequency
        co_ZPE += 0.5*h*nu
    print co_ZPE


with jasp('hwk3/co2-350-vib') as calc:
    freq = calc.get_vibrational_frequencies()

    co2_ZPE = 0.0
    for f in freq:
        if not isinstance(f,float):
            continue #skip complex numbers
        nu = f*c # convert to frequency
        co2_ZPE += 0.5*h*nu
    print co2_ZPE

rxn_ZPE = co2_ZPE - co_ZPE - 0.5*o2_ZPE

print 'The ZPE correction to the reaction is {0:1.3f} eV'.format(rxn_ZPE)

print 'E_rxn_zpe = {0:1.3f} eV'.format(-3.1 + rxn_ZPE)
#+END_SRC

#+RESULTS:
: 0.103035371463
: 0.140534031074
: 0.307611072938
: The ZPE correction to the reaction is 0.116 eV
: E_rxn_zpe = -2.984 eV


** Compare your computed energy to a value from the literature.
Provide a reference for your literature value.

#+caption: Standard enthalpies of formation (webbook.nist.gov)
|     | Standard enthalpy (kJ/mol) |
|-----+----------------------------|
| [[http://webbook.nist.gov/cgi/cbook.cgi?ID=C124389&Units=SI&Mask=1#Thermo-Gas][CO]]  | -110.53 ± 0.17             |
| [[http://webbook.nist.gov/cgi/cbook.cgi?ID=C124389&Units=SI&Mask=1#Thermo-Gas][CO2]] | -393.51 ± 0.13             |
| O2  | 0.0                        |

The standard enthalpy of reaction is -282.98 kJ/mol which is about -2.95 eV.

Our calculated value is *remarkably* close to the experimental value after zero point energy correction! This is certainly due to fortuitous error cancellations. DFT is not usually this good.

* Plot the electron density of the CO2 molecule.
Include the figure in your homework.

#+BEGIN_SRC python
from jasp import *
from enthought.mayavi import mlab
from ase.data import vdw_radii
from ase.data.colors import cpk_colors

with jasp('hwk3/co2-350') as calc:
    atoms = calc.get_atoms()
    x, y, z, cd = calc.get_charge_density()

mlab.figure(1, bgcolor=(1, 1, 1)) # make a white figure
mlab.contour3d(x, y, z, cd)
mlab.view(azimuth=-90, elevation=90, distance='auto')
mlab.savefig('hwk3/co2-cd.png')
#+END_SRC

#+RESULTS:
: None

#+caption: CO2 charge density.
[[./hwk3/co2-cd.png]]

It looks a lot like the CO charge density looking in the mirror!
